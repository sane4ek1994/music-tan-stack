import createClient, { type Middleware } from 'openapi-fetch'
import type { paths } from './schema' // generated by openapi-typescript

export const baseUrl = 'https://musicfun.it-incubator.app/api/1.0/'
const apiKey = '517ee786-5e80-4719-bc85-70748bb75745'
let refreshPromise: null | Promise<void> = null

function makeRefreshToken() {
  if (!refreshPromise) {
    refreshPromise = (async () => {
      const refreshToken = localStorage.getItem('music-fun-refresh-token')
      if (!refreshToken) throw new Error('No refresh token')

      const response = await fetch(baseUrl + 'auth/refresh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'api-key': apiKey
        },
        body: JSON.stringify({ refreshToken })
      })
      if (!response.ok) {
        localStorage.removeItem('music-fun-access-token')
        localStorage.removeItem('music-fun-refresh-token')
        throw new Error('Refresh token failed')
      }

      const data = await response.json()
      localStorage.setItem('music-fun-access-token', data.accessToken)
      localStorage.setItem('music-fun-refresh-token', data.refreshToken)
    })()

    refreshPromise.finally(() => (refreshPromise = null))
  }

  return refreshPromise
}

const authMiddleware: Middleware = {
  onRequest({ request }) {
    const accessToken = localStorage.getItem('music-fun-access-token')
    if (accessToken) {
      request.headers.set('Authorization', 'Bearer ' + accessToken)
    }

    //@ts-expect-error hot fix
    request._retryRequest = request.clone()

    return request
  },
  async onResponse({ response }) {
    if (response.ok) return response
    if (!response.ok && response.status !== 401) {
      // Will produce error messages like "https://example.org/api/v1/example: 404 Not Found".
      throw new Error(`${response.url}: ${response.status} ${response.statusText}`)
    }

    try {
      await makeRefreshToken()
      //@ts-expect-error hot fix
      const originalRequest: Response = response._retryResponse
      const retryRequest = new Request(originalRequest, {
        headers: new Headers(originalRequest.headers)
      })

      retryRequest.headers.set(
        'Authorization',
        'Bearer' + localStorage.getItem('musicfun-access-token')
      )
      return fetch(retryRequest)
    } catch {
      return response
    }
  }
}

export const client = createClient<paths>({
  baseUrl,
  headers: {
    // TODO удалить этот ключ!
    'api-key': apiKey
  }
})
client.use(authMiddleware)
